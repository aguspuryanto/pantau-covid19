{"version":3,"sources":["Navbar.js","CasesByCountry.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","bg","fixed","variant","Brand","useState","totalCases","setTotalCases","totalDeaths","setTotalDeaths","totalRecovered","setTotalRecovered","dataCountry","setDataCountry","dataTakenTime","setDataTakenTime","filteredCountry","setFilteredCountry","filterText","setFilterText","style","cardHeader","fontSize","useEffect","axios","method","url","headers","then","response","console","log","data","total_cases","total_deaths","total_recovered","catch","error","countries_stat","statistic_taken_at","Container","CardDeck","Card","text","Header","Body","Title","InputGroup","className","FormControl","placeholder","aria-label","aria-describedby","value","onChange","e","target","newFilter","filter","country_name","toLowerCase","includes","handleChangeFilter","Table","striped","bordered","hover","responsive","map","idx","key","cases","deaths","new_deaths","new_cases","serious_critical","active_cases","App","CasesByCountry","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2b614885.chunk.js","sourcesContent":["import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nexport default () => {\n  return (\n    <Navbar bg=\"dark\" fixed=\"top\" variant=\"dark\">\n      <Navbar.Brand>Pantau Covid-19</Navbar.Brand>\n    </Navbar>\n  )\n}\n","import React, { useState, useEffect } from 'react'\nimport {\n  Container,\n  Card,\n  CardDeck,\n  InputGroup,\n  Table,\n  FormControl\n} from 'react-bootstrap'\nimport axios from 'axios'\n\nexport default () => {\n  const [totalCases, setTotalCases] = useState(0)\n  const [totalDeaths, setTotalDeaths] = useState(0)\n  const [totalRecovered, setTotalRecovered] = useState(0)\n\n  const [dataCountry, setDataCountry] = useState([])\n  const [dataTakenTime, setDataTakenTime] = useState('')\n  const [filteredCountry, setFilteredCountry] = useState([])\n  const [filterText, setFilterText] = useState('')\n\n  const style = {\n    cardHeader: {\n      fontSize: '20px'\n    }\n  }\n\n  useEffect(() => {\n    axios({\n      method: 'GET',\n      url:\n        'https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php',\n      headers: {\n        'content-type': 'application/octet-stream',\n        'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\n        'x-rapidapi-key': '28ace3fa3dmsha8a82e678f90957p1a2413jsnb7152ef288ed'\n      }\n    })\n      .then(response => {\n        console.log(response.data)\n        setTotalCases(response.data.total_cases)\n        setTotalDeaths(response.data.total_deaths)\n        setTotalRecovered(response.data.total_recovered)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n\n    axios({\n      method: 'GET',\n      url:\n        'https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php',\n      headers: {\n        'content-type': 'application/octet-stream',\n        'x-rapidapi-host': 'coronavirus-monitor.p.rapidapi.com',\n        'x-rapidapi-key': '28ace3fa3dmsha8a82e678f90957p1a2413jsnb7152ef288ed'\n      }\n    })\n      .then(response => {\n        console.log(response.data)\n        setDataCountry([...response.data.countries_stat])\n        setFilteredCountry([...response.data.countries_stat])\n        setDataTakenTime(response.data.statistic_taken_at)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }, [])\n\n  const handleChangeFilter = e => {\n    console.log(e.target.value)\n    setFilterText(e.target.value)\n    const newFilter = dataCountry.filter(data =>\n      data.country_name.toLowerCase().includes(e.target.value.toLowerCase())\n    )\n\n    setFilteredCountry([...newFilter])\n  }\n\n  const getList = () => {\n    const listCountry = filteredCountry.map((data, idx) => (\n      <tr key={idx}>\n        <td>{data.country_name}</td>\n        <td>{data.cases}</td>\n        <td>{data.deaths}</td>\n        <td>{data.total_recovered}</td>\n        <td>{data.new_deaths}</td>\n        <td>{data.new_cases}</td>\n        <td>{data.serious_critical}</td>\n        <td>{data.active_cases}</td>\n      </tr>\n    ))\n\n    return listCountry\n  }\n\n  return (\n    <Container>\n      <br />\n      <br />\n      <br />\n      <CardDeck>\n        <Card bg=\"dark\" text=\"white\">\n          <Card.Header style={style.cardHeader}>Total Cases</Card.Header>\n          <Card.Body>\n            <Card.Title>{totalCases}</Card.Title>\n          </Card.Body>\n        </Card>\n        <Card bg=\"danger\" text=\"white\">\n          <Card.Header style={style.cardHeader}>Total Deaths</Card.Header>\n          <Card.Body>\n            <Card.Title>{totalDeaths}</Card.Title>\n          </Card.Body>\n        </Card>\n        <Card bg=\"success\" text=\"white\">\n          <Card.Header style={style.cardHeader}>Total Recovered</Card.Header>\n          <Card.Body>\n            <Card.Title>{totalRecovered}</Card.Title>\n          </Card.Body>\n        </Card>\n        <Card bg=\"info\" text=\"white\">\n          <Card.Header style={style.cardHeader}>Statistic Taken At</Card.Header>\n          <Card.Body>\n            <Card.Title>{dataTakenTime}</Card.Title>\n          </Card.Body>\n        </Card>\n      </CardDeck>\n\n      <br />\n\n      <Card bg=\"dark\">\n        <Card.Body>\n          <InputGroup className=\"mb-3\">\n            <FormControl\n              placeholder=\"Search Country\"\n              aria-label=\"Search Country\"\n              aria-describedby=\"basic-addon2\"\n              value={filterText}\n              onChange={e => handleChangeFilter(e)}\n            />\n          </InputGroup>\n          <Table striped bordered hover variant=\"dark\" responsive>\n            <thead>\n              <tr>\n                <th>Country Name</th>\n                <th>Cases</th>\n                <th>Deaths</th>\n                <th>Recovered</th>\n                <th>New Deaths</th>\n                <th>New Cases</th>\n                <th>Serious Critical</th>\n                <th>Active Cases</th>\n              </tr>\n            </thead>\n            <tbody>{getList()}</tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    </Container>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport Navbar from './Navbar'\nimport CasesByCountry from './CasesByCountry'\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <CasesByCountry />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}