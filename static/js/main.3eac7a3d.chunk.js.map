{"version":3,"sources":["AppContext.js","Navbar.js","api.js","CasesByCountry.js","WorldTotalStatistic.js","Home.js","db-config.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","LanguageContext","createContext","ThemeContext","LanguageProvider","props","useState","language","setLanguage","languageState","changeLanguage","newLanguage","Provider","value","children","ThemeProvider","theme","setTheme","themeState","changeTheme","newTheme","useContext","console","log","Navbar","bg","fixed","variant","Brand","className","style","backgroundColor","backgroundRepeat","border","cursor","overflow","outline","onClick","icon","faSun","faMoon","color","size","axios","defaults","headers","common","process","dataCountry","setDataCountry","filteredCountry","setFilteredCountry","useEffect","get","then","response","data","countries_stat","catch","error","Card","Body","InputGroup","FormControl","placeholder","aria-label","aria-describedby","onChange","e","newFilter","filter","country_name","toLowerCase","includes","target","Table","striped","bordered","hover","responsive","map","idx","key","cases","deaths","total_recovered","new_deaths","new_cases","serious_critical","active_cases","totalCases","setTotalCases","totalDeaths","setTotalDeaths","totalRecovered","setTotalRecovered","dataTakenTime","setDataTakenTime","cardHeader","fontSize","total_cases","total_deaths","statistic_taken_at","CardDeck","text","Header","Title","marginTop","Container","WorldTotalStatistic","CasesByCountry","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","currentViewers","params","country","res","ref","db","firestore","collection","viewersRef","doc","snap","forEach","viewers","update","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3eac7a3d.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react'\n\nconst AppContext = () => {\n  const LanguageContext = createContext()\n  const ThemeContext = createContext()\n\n  const LanguageProvider = props => {\n    const [language, setLanguage] = useState('US')\n    const changeLanguage = newLanguage => setLanguage(newLanguage)\n    const languageState = { language, changeLanguage }\n\n    return (\n      <LanguageContext.Provider value={languageState}>\n        {props.children}\n      </LanguageContext.Provider>\n    )\n  }\n\n  const ThemeProvider = props => {\n    const [theme, setTheme] = useState('dark')\n    const changeTheme = newTheme => setTheme(newTheme)\n    const themeState = { theme, changeTheme }\n\n    return (\n      <ThemeContext.Provider value={themeState}>\n        {props.children}\n      </ThemeContext.Provider>\n    )\n  }\n\n  return {\n    LanguageContext,\n    LanguageProvider,\n    ThemeContext,\n    ThemeProvider\n  }\n}\n\nexport default AppContext()\n","import React, { useContext } from 'react'\nimport { Dropdown, Navbar } from 'react-bootstrap'\nimport ReactCountryFlag from 'react-country-flag'\nimport AppContext from './AppContext'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSun, faMoon } from '@fortawesome/free-solid-svg-icons'\n\nconst FlagButton = props => {\n  return props.isActive ? (\n    <Dropdown.Item active style={{ padding: '0', paddingLeft: '1em' }}>\n      <ReactCountryFlag\n        className=\"emojiFlag\"\n        countryCode={props.countryCode}\n        style={{\n          fontSize: '2em'\n        }}\n      />\n      {props.countryName}\n    </Dropdown.Item>\n  ) : (\n    <Dropdown.Item style={{ padding: '0', paddingLeft: '1em' }}>\n      <ReactCountryFlag\n        className=\"emojiFlag\"\n        countryCode={props.countryCode}\n        style={{\n          fontSize: '2em'\n        }}\n      />\n      {props.countryName}\n    </Dropdown.Item>\n  )\n}\n\nexport default () => {\n  const { theme, changeTheme } = useContext(AppContext.ThemeContext)\n  const { language, changeLanguage } = useContext(AppContext.LanguageContext)\n  console.log(theme)\n\n  return (\n    <Navbar\n      bg={theme === 'dark' ? 'dark' : 'light'}\n      fixed=\"top\"\n      variant={theme === 'dark' ? 'dark' : 'light'}\n    >\n      <Navbar.Brand className=\"mr-auto\">Pantau Covid-19</Navbar.Brand>\n      {/* <Dropdown style={{ marginRight: '1rem' }}>\n        <Dropdown.Toggle\n          variant={theme === 'dark' ? 'outline-light' : 'outline-dark'}\n          color=\"white\"\n        >\n          {language === 'ID' ? 'Indonesia' : 'English'}\n        </Dropdown.Toggle>\n        <Dropdown.Menu style={{ marginRight: '10rem' }}>\n          <FlagButton\n            countryCode=\"ID\"\n            countryName=\" Indonesia\"\n            isActive={language === 'ID' ? true : false}\n          />\n          <FlagButton\n            countryCode=\"US\"\n            countryName=\" English\"\n            isActive={language === 'US' ? true : false}\n          />\n        </Dropdown.Menu>\n      </Dropdown> */}\n      <button\n        style={{\n          backgroundColor: 'transparent',\n          backgroundRepeat: 'no-repeat',\n          border: 'none',\n          cursor: 'pointer',\n          overflow: 'hidden',\n          outline: 'none'\n        }}\n        onClick={() => {\n          if (theme === 'dark') changeTheme('light')\n          else changeTheme('dark')\n        }}\n      >\n        <FontAwesomeIcon\n          icon={theme === 'dark' ? faSun : faMoon}\n          color={theme === 'dark' ? 'orange' : '#333940'}\n          size=\"2x\"\n        />\n      </button>\n    </Navbar>\n  )\n}\n","import axios from 'axios'\n\naxios.defaults.headers.common['content-type'] = 'application/octet-stream'\naxios.defaults.headers.common['x-rapidapi-host'] =\n  'coronavirus-monitor.p.rapidapi.com'\naxios.defaults.headers.common['x-rapidapi-key'] =\n  process.env.REACT_APP_RAPID_API_KEY\n\nexport default axios\n","import React, { useState, useEffect, useContext } from 'react'\nimport AppContext from './AppContext'\nimport {\n  Container,\n  Card,\n  CardDeck,\n  InputGroup,\n  Table,\n  FormControl,\n  DropdownButton,\n  Dropdown,\n  Form,\n  Row,\n  Col\n} from 'react-bootstrap'\nimport axios from './api'\n\nexport default () => {\n  const { theme, changeTheme } = useContext(AppContext.ThemeContext)\n  const { language, changeLanguage } = useContext(AppContext.LanguageContext)\n\n  const [dataCountry, setDataCountry] = useState([])\n\n  const [filteredCountry, setFilteredCountry] = useState([])\n  const [filterText, setFilterText] = useState('')\n  const [isAscending, setIsAscending] = useState(true)\n  const [orderBy, setOrderBy] = useState(0)\n\n  const style = {\n    cardHeader: {\n      fontSize: '20px'\n    }\n  }\n\n  console.log(dataCountry[0])\n\n  useEffect(() => {\n    axios\n      .get(\n        'https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_country.php'\n      )\n      .then(response => {\n        // console.log(response.data)\n        setDataCountry([...response.data.countries_stat])\n        setFilteredCountry([...response.data.countries_stat])\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }, [])\n\n  const orderByDeath = () => {\n    var newFilter = filteredCountry\n    newFilter.sort((a, b) => {\n      var deathA = a.deaths.replace(/,/g, '.')\n      var deathB = b.deaths.replace(/,/g, '.')\n      if (deathA.includes('.')) deathA = parseInt(parseFloat(deathA) * 1000)\n      else deathA = parseInt(deathA)\n      if (deathB.includes('.')) deathB = parseInt(parseFloat(deathB) * 1000)\n      else deathB = parseInt(deathB)\n\n      console.log(deathA)\n\n      return deathA - deathB\n    })\n    setFilteredCountry([...newFilter])\n  }\n\n  const orderByCases = () => {\n    var newFilter = filteredCountry\n    newFilter.sort((a, b) => {\n      var casesA = a.cases.replace(/,/g, '.')\n      var casesB = b.cases.replace(/,/g, '.')\n      if (casesA.includes('.')) casesA = parseInt(parseFloat(casesA) * 1000)\n      else casesA = parseInt(casesA)\n      if (casesB.includes('.')) casesB = parseInt(parseFloat(casesB) * 1000)\n      else casesB = parseInt(casesB)\n\n      console.log(casesA)\n\n      return casesA - casesB\n    })\n    setFilteredCountry([...newFilter])\n  }\n\n  const handleChangeAscending = () => {\n    var newFilter = filteredCountry\n\n    console.log(newFilter)\n    newFilter.sort()\n    newFilter.reverse()\n\n    setFilteredCountry([...newFilter])\n    console.log(newFilter)\n  }\n\n  const handleChangeFilter = e => {\n    const newFilter = dataCountry.filter(data =>\n      data.country_name.toLowerCase().includes(e.target.value.toLowerCase())\n    )\n\n    setFilteredCountry([...newFilter])\n  }\n\n  const getList = () => {\n    const listCountry = filteredCountry.map((data, idx) => (\n      <tr key={idx}>\n        <td>{data.country_name}</td>\n        <td>{data.cases}</td>\n        <td>{data.deaths}</td>\n        <td>{data.total_recovered}</td>\n        <td>{data.new_deaths}</td>\n        <td>{data.new_cases}</td>\n        <td>{data.serious_critical}</td>\n        <td>{data.active_cases}</td>\n      </tr>\n    ))\n\n    return listCountry\n  }\n\n  return (\n    <>\n      <Card bg={theme === 'dark' ? 'dark' : 'light'}>\n        <Card.Body>\n          <InputGroup>\n            <FormControl\n              placeholder=\"Filter Country\"\n              aria-label=\"Filter Country\"\n              aria-describedby=\"basic-addon2\"\n              // value={filterText}\n              onChange={handleChangeFilter}\n            />\n            {/* <DropdownButton\n              id=\"dropdown-item-button\"\n              title=\"Order By\"\n              style={{ marginLeft: '10px' }}\n              variant={theme === 'dark' ? 'outline-light' : 'outline-dark'}\n            >\n              <Dropdown.Item as=\"button\" onClick={orderByCases}>\n                Cases\n              </Dropdown.Item>\n              <Dropdown.Item as=\"button\" onClick={orderByDeath}>\n                Death\n              </Dropdown.Item>\n            </DropdownButton>\n            <DropdownButton\n              id=\"dropdown-item-button\"\n              title=\"Ascending\"\n              style={{ marginLeft: '10px' }}\n              variant={theme === 'dark' ? 'outline-light' : 'outline-dark'}\n            >\n              <Dropdown.Item as=\"button\">Ascending</Dropdown.Item>\n              <Dropdown.Item\n                as=\"button\"\n                onClick={() => handleChangeAscending()}\n              >\n                Descending\n              </Dropdown.Item>\n            </DropdownButton> */}\n          </InputGroup>\n          <br />\n          <Table\n            striped\n            bordered\n            hover\n            variant={theme === 'dark' ? 'dark' : 'light'}\n            responsive\n          >\n            <thead>\n              <tr>\n                <th>Country Name</th>\n                <th>Cases</th>\n                <th>Deaths</th>\n                <th>Recovered</th>\n                <th>New Deaths</th>\n                <th>New Cases</th>\n                <th>Serious Critical</th>\n                <th>Active Cases</th>\n              </tr>\n            </thead>\n            <tbody>{getList()}</tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    </>\n  )\n}\n","import React, { useState, useEffect, useContext } from 'react'\nimport AppContext from './AppContext'\nimport { Card, CardDeck } from 'react-bootstrap'\nimport axios from './api'\n\nexport default () => {\n  const { theme, changeTheme } = useContext(AppContext.ThemeContext)\n  const { language, changeLanguage } = useContext(AppContext.LanguageContext)\n\n  const [totalCases, setTotalCases] = useState(0)\n  const [totalDeaths, setTotalDeaths] = useState(0)\n  const [totalRecovered, setTotalRecovered] = useState(0)\n\n  const [dataTakenTime, setDataTakenTime] = useState('')\n  const style = {\n    cardHeader: {\n      fontSize: '20px'\n    }\n  }\n\n  useEffect(() => {\n    axios\n      .get(\n        'https://coronavirus-monitor.p.rapidapi.com/coronavirus/worldstat.php'\n      )\n      .then(response => {\n        // console.log(response.data)\n        setTotalCases(response.data.total_cases)\n        setTotalDeaths(response.data.total_deaths)\n        setTotalRecovered(response.data.total_recovered)\n        setDataTakenTime(response.data.statistic_taken_at)\n      })\n      .catch(error => {\n        console.log(error)\n      })\n  }, [])\n\n  return (\n    <>\n      <CardDeck>\n        <Card\n          bg={theme === 'dark' ? 'dark' : 'light'}\n          text={theme === 'dark' ? 'light' : 'dark'}\n        >\n          <Card.Header style={style.cardHeader}>Total Cases</Card.Header>\n          <Card.Body>\n            <Card.Title>{totalCases}</Card.Title>\n          </Card.Body>\n        </Card>\n        <Card bg=\"danger\" text=\"white\">\n          <Card.Header style={style.cardHeader}>Total Deaths</Card.Header>\n          <Card.Body>\n            <Card.Title>{totalDeaths}</Card.Title>\n          </Card.Body>\n        </Card>\n        <Card bg=\"success\" text=\"white\">\n          <Card.Header style={style.cardHeader}>Total Recovered</Card.Header>\n          <Card.Body>\n            <Card.Title>{totalRecovered}</Card.Title>\n          </Card.Body>\n        </Card>\n        <Card bg=\"info\" text=\"white\">\n          <Card.Header style={style.cardHeader}>Statistic Taken At</Card.Header>\n          <Card.Body>\n            <Card.Title>{dataTakenTime}</Card.Title>\n          </Card.Body>\n        </Card>\n      </CardDeck>\n    </>\n  )\n}\n","import React from 'react'\nimport CasesByCountry from './CasesByCountry'\nimport { Container } from 'react-bootstrap'\nimport ExampleChart from './ExampleChart'\nimport WorldTotalStatistic from './WorldTotalStatistic'\n\nexport default () => {\n  return (\n    <div style={{ marginTop: '5em' }}>\n      <Container>\n        {/* <ExampleChart />\n        <br /> */}\n        <WorldTotalStatistic />\n        <br />\n        <CasesByCountry />\n      </Container>\n    </div>\n  )\n}\n","import * as firebase from 'firebase'\nvar firebaseConfig = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: 'first-87b01.firebaseapp.com',\n  databaseURL: 'https://first-87b01.firebaseio.com',\n  projectId: 'first-87b01',\n  storageBucket: 'first-87b01.appspot.com',\n  messagingSenderId: '1040834269758',\n  appId: '1:1040834269758:web:4457b33163eaba94db376f'\n}\n\nfirebase.initializeApp(firebaseConfig)\n\nexport default firebase\n","import React, { useState, useEffect } from 'react'\nimport './App.css'\nimport Navbar from './Navbar'\nimport Home from './Home'\nimport db from './db-config'\nimport 'dotenv'\nimport AppContext from './AppContext'\nimport axios from './api'\n\nfunction App() {\n  axios\n    .get(\n      'https://coronavirus-monitor.p.rapidapi.com/coronavirus/cases_by_particular_country.php',\n      {\n        params: {\n          country: 'indonesia'\n        }\n      }\n    )\n    .then(res => console.log(res))\n    .catch(e => console.log(e))\n\n  let currentViewers\n  const id = process.env.REACT_APP_COLLECTION_ID\n  const ref = db.firestore().collection('pantau_covid19')\n  const viewersRef = db\n    .firestore()\n    .collection('pantau_covid19')\n    .doc(id)\n\n  ref\n    .get()\n    .then(snap => {\n      snap.forEach(doc => {\n        currentViewers = doc.data().viewers\n      })\n    })\n    .then(() => {\n      viewersRef.update({\n        viewers: currentViewers + 1\n      })\n    })\n\n  return (\n    <AppContext.ThemeProvider>\n      <AppContext.LanguageProvider>\n        <Navbar />\n        <Home />\n      </AppContext.LanguageProvider>\n    </AppContext.ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}